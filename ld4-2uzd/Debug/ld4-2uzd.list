
ld4-2uzd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003120  08003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003130  08003130  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003130  08003130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003138  08003138  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003138  08003138  00013138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800313c  0800313c  0001313c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000c0  200000c0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008d5c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000015df  00000000  00000000  00028ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000968  00000000  00000000  0002a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000745  00000000  00000000  0002ad28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fac6  00000000  00000000  0002b46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a222  00000000  00000000  0004af33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4739  00000000  00000000  00055155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002720  00000000  00000000  00119890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0011bfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003108 	.word	0x08003108

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003108 	.word	0x08003108

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fb80 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004cc:	f000 f894 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 f9e4 	bl	800089c <MX_GPIO_Init>
  MX_TIM2_Init();
 80004d4:	f000 f8fa 	bl	80006cc <MX_TIM2_Init>
  MX_TIM3_Init();
 80004d8:	f000 f968 	bl	80007ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80004dc:	2100      	movs	r1, #0
 80004de:	4803      	ldr	r0, [pc, #12]	; (80004ec <main+0x28>)
 80004e0:	f001 fc9e 	bl	8001e20 <HAL_TIM_IC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80004e4:	4802      	ldr	r0, [pc, #8]	; (80004f0 <main+0x2c>)
 80004e6:	f001 fb79 	bl	8001bdc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <main+0x26>
 80004ec:	20000028 	.word	0x20000028
 80004f0:	20000070 	.word	0x20000070

080004f4 <HAL_TIM_IC_CaptureCallback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	UNUSED(htim);


	if (htim->Instance == TIM2) {
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000504:	d170      	bne.n	80005e8 <HAL_TIM_IC_CaptureCallback+0xf4>
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
	inputCaptureVal = __HAL_TIM_GET_COUNTER(htim);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050c:	4a38      	ldr	r2, [pc, #224]	; (80005f0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800050e:	6013      	str	r3, [r2, #0]
	//if (inputCaptureVal != 0) {
	// inputCaptureVal = 0
	//}
	//inputCaptureVal2 = __HAL_TIM_GET_COUNTER(htim);
	__HAL_TIM_SetCounter(htim, 0);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2200      	movs	r2, #0
 8000516:	625a      	str	r2, [r3, #36]	; 0x24

	if (inputCaptureVal < 8000) {
 8000518:	4b35      	ldr	r3, [pc, #212]	; (80005f0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8000520:	d217      	bcs.n	8000552 <HAL_TIM_IC_CaptureCallback+0x5e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 8000522:	2201      	movs	r2, #1
 8000524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000528:	4832      	ldr	r0, [pc, #200]	; (80005f4 <HAL_TIM_IC_CaptureCallback+0x100>)
 800052a:	f000 fe6f 	bl	800120c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000534:	482f      	ldr	r0, [pc, #188]	; (80005f4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000536:	f000 fe69 	bl	800120c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000540:	482c      	ldr	r0, [pc, #176]	; (80005f4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000542:	f000 fe63 	bl	800120c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800054c:	4829      	ldr	r0, [pc, #164]	; (80005f4 <HAL_TIM_IC_CaptureCallback+0x100>)
 800054e:	f000 fe5d 	bl	800120c <HAL_GPIO_WritePin>
		}
	if ((inputCaptureVal >= 8000) & (inputCaptureVal < 16000)) {
 8000552:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800055a:	4293      	cmp	r3, r2
 800055c:	bf8c      	ite	hi
 800055e:	2301      	movhi	r3, #1
 8000560:	2300      	movls	r3, #0
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f643 617f 	movw	r1, #15999	; 0x3e7f
 800056c:	428b      	cmp	r3, r1
 800056e:	bf94      	ite	ls
 8000570:	2301      	movls	r3, #1
 8000572:	2300      	movhi	r3, #0
 8000574:	b2db      	uxtb	r3, r3
 8000576:	4013      	ands	r3, r2
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b00      	cmp	r3, #0
 800057c:	d017      	beq.n	80005ae <HAL_TIM_IC_CaptureCallback+0xba>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000584:	481b      	ldr	r0, [pc, #108]	; (80005f4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000586:	f000 fe41 	bl	800120c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 800058a:	2201      	movs	r2, #1
 800058c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000590:	4818      	ldr	r0, [pc, #96]	; (80005f4 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000592:	f000 fe3b 	bl	800120c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800059c:	4815      	ldr	r0, [pc, #84]	; (80005f4 <HAL_TIM_IC_CaptureCallback+0x100>)
 800059e:	f000 fe35 	bl	800120c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005a8:	4812      	ldr	r0, [pc, #72]	; (80005f4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80005aa:	f000 fe2f 	bl	800120c <HAL_GPIO_WritePin>
		}
	if (inputCaptureVal >= 16000) {
 80005ae:	4b10      	ldr	r3, [pc, #64]	; (80005f0 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80005b6:	d317      	bcc.n	80005e8 <HAL_TIM_IC_CaptureCallback+0xf4>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005be:	480d      	ldr	r0, [pc, #52]	; (80005f4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80005c0:	f000 fe24 	bl	800120c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80005cc:	f000 fe1e 	bl	800120c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d6:	4807      	ldr	r0, [pc, #28]	; (80005f4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80005d8:	f000 fe18 	bl	800120c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e2:	4804      	ldr	r0, [pc, #16]	; (80005f4 <HAL_TIM_IC_CaptureCallback+0x100>)
 80005e4:	f000 fe12 	bl	800120c <HAL_GPIO_WritePin>
		}
	}

}
 80005e8:	bf00      	nop
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	200000b8 	.word	0x200000b8
 80005f4:	40020c00 	.word	0x40020c00

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	; 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	; 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fd52 	bl	80030b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b28      	ldr	r3, [pc, #160]	; (80006c4 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <SystemClock_Config+0xcc>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	; 0x40
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b22      	ldr	r3, [pc, #136]	; (80006c8 <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <SystemClock_Config+0xd0>)
 8000642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000654:	2302      	movs	r3, #2
 8000656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	2301      	movs	r3, #1
 800065a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065c:	2310      	movs	r3, #16
 800065e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000660:	2302      	movs	r3, #2
 8000662:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000664:	2300      	movs	r3, #0
 8000666:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000668:	2308      	movs	r3, #8
 800066a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800066c:	2348      	movs	r3, #72	; 0x48
 800066e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000670:	2302      	movs	r3, #2
 8000672:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000674:	2307      	movs	r3, #7
 8000676:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 0320 	add.w	r3, r7, #32
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fdf9 	bl	8001274 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000688:	f000 f94c 	bl	8000924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000690:	2302      	movs	r3, #2
 8000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2102      	movs	r1, #2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f001 f85a 	bl	8001764 <HAL_RCC_ClockConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006b6:	f000 f935 	bl	8000924 <Error_Handler>
  }
}
 80006ba:	bf00      	nop
 80006bc:	3750      	adds	r7, #80	; 0x50
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000

080006cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	; 0x28
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006ea:	463b      	mov	r3, r7
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006f6:	4b2c      	ldr	r3, [pc, #176]	; (80007a8 <MX_TIM2_Init+0xdc>)
 80006f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 36000-1;
 80006fe:	4b2a      	ldr	r3, [pc, #168]	; (80007a8 <MX_TIM2_Init+0xdc>)
 8000700:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8000704:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <MX_TIM2_Init+0xdc>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 24000-1;
 800070c:	4b26      	ldr	r3, [pc, #152]	; (80007a8 <MX_TIM2_Init+0xdc>)
 800070e:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8000712:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000714:	4b24      	ldr	r3, [pc, #144]	; (80007a8 <MX_TIM2_Init+0xdc>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071a:	4b23      	ldr	r3, [pc, #140]	; (80007a8 <MX_TIM2_Init+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000720:	4821      	ldr	r0, [pc, #132]	; (80007a8 <MX_TIM2_Init+0xdc>)
 8000722:	f001 fa0b 	bl	8001b3c <HAL_TIM_Base_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 800072c:	f000 f8fa 	bl	8000924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000734:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000736:	f107 0318 	add.w	r3, r7, #24
 800073a:	4619      	mov	r1, r3
 800073c:	481a      	ldr	r0, [pc, #104]	; (80007a8 <MX_TIM2_Init+0xdc>)
 800073e:	f001 fefd 	bl	800253c <HAL_TIM_ConfigClockSource>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000748:	f000 f8ec 	bl	8000924 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800074c:	4816      	ldr	r0, [pc, #88]	; (80007a8 <MX_TIM2_Init+0xdc>)
 800074e:	f001 fb0e 	bl	8001d6e <HAL_TIM_IC_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000758:	f000 f8e4 	bl	8000924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000764:	f107 0310 	add.w	r3, r7, #16
 8000768:	4619      	mov	r1, r3
 800076a:	480f      	ldr	r0, [pc, #60]	; (80007a8 <MX_TIM2_Init+0xdc>)
 800076c:	f002 fc10 	bl	8002f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000776:	f000 f8d5 	bl	8000924 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800077a:	2302      	movs	r3, #2
 800077c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800077e:	2301      	movs	r3, #1
 8000780:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8000786:	230f      	movs	r3, #15
 8000788:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	4619      	mov	r1, r3
 8000790:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_TIM2_Init+0xdc>)
 8000792:	f001 fd75 	bl	8002280 <HAL_TIM_IC_ConfigChannel>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 800079c:	f000 f8c2 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	3728      	adds	r7, #40	; 0x28
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	20000028 	.word	0x20000028

080007ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08e      	sub	sp, #56	; 0x38
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	f107 0320 	add.w	r3, r7, #32
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]
 80007d8:	615a      	str	r2, [r3, #20]
 80007da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007dc:	4b2d      	ldr	r3, [pc, #180]	; (8000894 <MX_TIM3_Init+0xe8>)
 80007de:	4a2e      	ldr	r2, [pc, #184]	; (8000898 <MX_TIM3_Init+0xec>)
 80007e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36000-1;
 80007e2:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <MX_TIM3_Init+0xe8>)
 80007e4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80007e8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b2a      	ldr	r3, [pc, #168]	; (8000894 <MX_TIM3_Init+0xe8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2000-1;
 80007f0:	4b28      	ldr	r3, [pc, #160]	; (8000894 <MX_TIM3_Init+0xe8>)
 80007f2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80007f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_TIM3_Init+0xe8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <MX_TIM3_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000804:	4823      	ldr	r0, [pc, #140]	; (8000894 <MX_TIM3_Init+0xe8>)
 8000806:	f001 f999 	bl	8001b3c <HAL_TIM_Base_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000810:	f000 f888 	bl	8000924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000818:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800081a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800081e:	4619      	mov	r1, r3
 8000820:	481c      	ldr	r0, [pc, #112]	; (8000894 <MX_TIM3_Init+0xe8>)
 8000822:	f001 fe8b 	bl	800253c <HAL_TIM_ConfigClockSource>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800082c:	f000 f87a 	bl	8000924 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000830:	4818      	ldr	r0, [pc, #96]	; (8000894 <MX_TIM3_Init+0xe8>)
 8000832:	f001 fa43 	bl	8001cbc <HAL_TIM_PWM_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800083c:	f000 f872 	bl	8000924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000848:	f107 0320 	add.w	r3, r7, #32
 800084c:	4619      	mov	r1, r3
 800084e:	4811      	ldr	r0, [pc, #68]	; (8000894 <MX_TIM3_Init+0xe8>)
 8000850:	f002 fb9e 	bl	8002f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800085a:	f000 f863 	bl	8000924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085e:	2360      	movs	r3, #96	; 0x60
 8000860:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	2200      	movs	r2, #0
 8000872:	4619      	mov	r1, r3
 8000874:	4807      	ldr	r0, [pc, #28]	; (8000894 <MX_TIM3_Init+0xe8>)
 8000876:	f001 fd9f 	bl	80023b8 <HAL_TIM_PWM_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000880:	f000 f850 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000884:	4803      	ldr	r0, [pc, #12]	; (8000894 <MX_TIM3_Init+0xe8>)
 8000886:	f000 f8e7 	bl	8000a58 <HAL_TIM_MspPostInit>

}
 800088a:	bf00      	nop
 800088c:	3738      	adds	r7, #56	; 0x38
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000070 	.word	0x20000070
 8000898:	40000400 	.word	0x40000400

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <MX_GPIO_Init+0x80>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <MX_GPIO_Init+0x80>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_GPIO_Init+0x80>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_GPIO_Init+0x80>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a11      	ldr	r2, [pc, #68]	; (800091c <MX_GPIO_Init+0x80>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_GPIO_Init+0x80>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80008f0:	480b      	ldr	r0, [pc, #44]	; (8000920 <MX_GPIO_Init+0x84>)
 80008f2:	f000 fc8b 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008f6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000908:	f107 030c 	add.w	r3, r7, #12
 800090c:	4619      	mov	r1, r3
 800090e:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_GPIO_Init+0x84>)
 8000910:	f000 fae0 	bl	8000ed4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000914:	bf00      	nop
 8000916:	3720      	adds	r7, #32
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40020c00 	.word	0x40020c00

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000928:	b672      	cpsid	i
}
 800092a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800092c:	e7fe      	b.n	800092c <Error_Handler+0x8>
	...

08000930 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_MspInit+0x4c>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	4a0f      	ldr	r2, [pc, #60]	; (800097c <HAL_MspInit+0x4c>)
 8000940:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000944:	6453      	str	r3, [r2, #68]	; 0x44
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <HAL_MspInit+0x4c>)
 8000948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x4c>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x4c>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6413      	str	r3, [r2, #64]	; 0x40
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x4c>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800096e:	2007      	movs	r0, #7
 8000970:	f000 fa6e 	bl	8000e50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80009a0:	d134      	bne.n	8000a0c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <HAL_TIM_Base_MspInit+0xcc>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <HAL_TIM_Base_MspInit+0xcc>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <HAL_TIM_Base_MspInit+0xcc>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <HAL_TIM_Base_MspInit+0xcc>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <HAL_TIM_Base_MspInit+0xcc>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <HAL_TIM_Base_MspInit+0xcc>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009da:	2301      	movs	r3, #1
 80009dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80009ea:	2301      	movs	r3, #1
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4816      	ldr	r0, [pc, #88]	; (8000a50 <HAL_TIM_Base_MspInit+0xd0>)
 80009f6:	f000 fa6d 	bl	8000ed4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	201c      	movs	r0, #28
 8000a00:	f000 fa31 	bl	8000e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a04:	201c      	movs	r0, #28
 8000a06:	f000 fa4a 	bl	8000e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000a0a:	e01a      	b.n	8000a42 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <HAL_TIM_Base_MspInit+0xd4>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d115      	bne.n	8000a42 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a16:	2300      	movs	r3, #0
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <HAL_TIM_Base_MspInit+0xcc>)
 8000a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <HAL_TIM_Base_MspInit+0xcc>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	6413      	str	r3, [r2, #64]	; 0x40
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <HAL_TIM_Base_MspInit+0xcc>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	201d      	movs	r0, #29
 8000a38:	f000 fa15 	bl	8000e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a3c:	201d      	movs	r0, #29
 8000a3e:	f000 fa2e 	bl	8000e9e <HAL_NVIC_EnableIRQ>
}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020000 	.word	0x40020000
 8000a54:	40000400 	.word	0x40000400

08000a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <HAL_TIM_MspPostInit+0x68>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d11d      	bne.n	8000ab6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_TIM_MspPostInit+0x6c>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <HAL_TIM_MspPostInit+0x6c>)
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <HAL_TIM_MspPostInit+0x6c>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
 8000a94:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a96:	2340      	movs	r3, #64	; 0x40
 8000a98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <HAL_TIM_MspPostInit+0x70>)
 8000ab2:	f000 fa0f 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3720      	adds	r7, #32
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40000400 	.word	0x40000400
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020000 	.word	0x40020000

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler+0x4>

08000ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b18:	f000 f8aa 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b24:	4802      	ldr	r0, [pc, #8]	; (8000b30 <TIM2_IRQHandler+0x10>)
 8000b26:	f001 faa3 	bl	8002070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000028 	.word	0x20000028

08000b34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <TIM3_IRQHandler+0x18>)
 8000b3a:	f001 fa99 	bl	8002070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000b3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b42:	4803      	ldr	r0, [pc, #12]	; (8000b50 <TIM3_IRQHandler+0x1c>)
 8000b44:	f000 fb7b 	bl	800123e <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000070 	.word	0x20000070
 8000b50:	40020c00 	.word	0x40020c00

08000b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <SystemInit+0x20>)
 8000b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <SystemInit+0x20>)
 8000b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b7c:	480d      	ldr	r0, [pc, #52]	; (8000bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b7e:	490e      	ldr	r1, [pc, #56]	; (8000bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b94:	4c0b      	ldr	r4, [pc, #44]	; (8000bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ba2:	f7ff ffd7 	bl	8000b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f002 fa8b 	bl	80030c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fc8b 	bl	80004c4 <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bbc:	08003140 	.word	0x08003140
  ldr r2, =_sbss
 8000bc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc4:	200000c0 	.word	0x200000c0

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	; (8000c0c <HAL_Init+0x40>)
 8000bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_Init+0x40>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	; (8000c0c <HAL_Init+0x40>)
 8000bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f92b 	bl	8000e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f808 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fe96 	bl	8000930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023c00 	.word	0x40023c00

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <HAL_InitTick+0x54>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_InitTick+0x58>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f943 	bl	8000eba <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00e      	b.n	8000c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d80a      	bhi.n	8000c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f90b 	bl	8000e66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c50:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <HAL_InitTick+0x5c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000004 	.word	0x20000004

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	; (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000008 	.word	0x20000008
 8000c94:	200000bc 	.word	0x200000bc

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200000bc 	.word	0x200000bc

08000cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc6:	68ba      	ldr	r2, [r7, #8]
 8000cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <__NVIC_GetPriorityGrouping+0x18>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	0a1b      	lsrs	r3, r3, #8
 8000d02:	f003 0307 	and.w	r3, r3, #7
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000ed00 	.word	0xe000ed00

08000d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db0b      	blt.n	8000d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d26:	79fb      	ldrb	r3, [r7, #7]
 8000d28:	f003 021f 	and.w	r2, r3, #31
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <__NVIC_EnableIRQ+0x38>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	095b      	lsrs	r3, r3, #5
 8000d34:	2001      	movs	r0, #1
 8000d36:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	; (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	; (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	; 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	; 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e1c:	d301      	bcc.n	8000e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00f      	b.n	8000e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <SysTick_Config+0x40>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f7ff ff8e 	bl	8000d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SysTick_Config+0x40>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <SysTick_Config+0x40>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff29 	bl	8000cb0 <__NVIC_SetPriorityGrouping>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e78:	f7ff ff3e 	bl	8000cf8 <__NVIC_GetPriorityGrouping>
 8000e7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	6978      	ldr	r0, [r7, #20]
 8000e84:	f7ff ff8e 	bl	8000da4 <NVIC_EncodePriority>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff5d 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff31 	bl	8000d14 <__NVIC_EnableIRQ>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b082      	sub	sp, #8
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ffa2 	bl	8000e0c <SysTick_Config>
 8000ec8:	4603      	mov	r3, r0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
	...

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	; 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
 8000eee:	e16b      	b.n	80011c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	f040 815a 	bne.w	80011c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d005      	beq.n	8000f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d130      	bne.n	8000f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0303 	and.w	r3, r3, #3
 8000f90:	2b03      	cmp	r3, #3
 8000f92:	d017      	beq.n	8000fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	689a      	ldr	r2, [r3, #8]
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d123      	bne.n	8001018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	08da      	lsrs	r2, r3, #3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3208      	adds	r2, #8
 8000fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	220f      	movs	r2, #15
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	691a      	ldr	r2, [r3, #16]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	08da      	lsrs	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	3208      	adds	r2, #8
 8001012:	69b9      	ldr	r1, [r7, #24]
 8001014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 0203 	and.w	r2, r3, #3
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 80b4 	beq.w	80011c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b60      	ldr	r3, [pc, #384]	; (80011e0 <HAL_GPIO_Init+0x30c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a5f      	ldr	r2, [pc, #380]	; (80011e0 <HAL_GPIO_Init+0x30c>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001068:	6453      	str	r3, [r2, #68]	; 0x44
 800106a:	4b5d      	ldr	r3, [pc, #372]	; (80011e0 <HAL_GPIO_Init+0x30c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001076:	4a5b      	ldr	r2, [pc, #364]	; (80011e4 <HAL_GPIO_Init+0x310>)
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	089b      	lsrs	r3, r3, #2
 800107c:	3302      	adds	r3, #2
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	220f      	movs	r2, #15
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a52      	ldr	r2, [pc, #328]	; (80011e8 <HAL_GPIO_Init+0x314>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d02b      	beq.n	80010fa <HAL_GPIO_Init+0x226>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a51      	ldr	r2, [pc, #324]	; (80011ec <HAL_GPIO_Init+0x318>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d025      	beq.n	80010f6 <HAL_GPIO_Init+0x222>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a50      	ldr	r2, [pc, #320]	; (80011f0 <HAL_GPIO_Init+0x31c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d01f      	beq.n	80010f2 <HAL_GPIO_Init+0x21e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4f      	ldr	r2, [pc, #316]	; (80011f4 <HAL_GPIO_Init+0x320>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d019      	beq.n	80010ee <HAL_GPIO_Init+0x21a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4e      	ldr	r2, [pc, #312]	; (80011f8 <HAL_GPIO_Init+0x324>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d013      	beq.n	80010ea <HAL_GPIO_Init+0x216>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4d      	ldr	r2, [pc, #308]	; (80011fc <HAL_GPIO_Init+0x328>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d00d      	beq.n	80010e6 <HAL_GPIO_Init+0x212>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4c      	ldr	r2, [pc, #304]	; (8001200 <HAL_GPIO_Init+0x32c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d007      	beq.n	80010e2 <HAL_GPIO_Init+0x20e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4b      	ldr	r2, [pc, #300]	; (8001204 <HAL_GPIO_Init+0x330>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d101      	bne.n	80010de <HAL_GPIO_Init+0x20a>
 80010da:	2307      	movs	r3, #7
 80010dc:	e00e      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010de:	2308      	movs	r3, #8
 80010e0:	e00c      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010e2:	2306      	movs	r3, #6
 80010e4:	e00a      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010e6:	2305      	movs	r3, #5
 80010e8:	e008      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010ea:	2304      	movs	r3, #4
 80010ec:	e006      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010ee:	2303      	movs	r3, #3
 80010f0:	e004      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e002      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010f6:	2301      	movs	r3, #1
 80010f8:	e000      	b.n	80010fc <HAL_GPIO_Init+0x228>
 80010fa:	2300      	movs	r3, #0
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	f002 0203 	and.w	r2, r2, #3
 8001102:	0092      	lsls	r2, r2, #2
 8001104:	4093      	lsls	r3, r2
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800110c:	4935      	ldr	r1, [pc, #212]	; (80011e4 <HAL_GPIO_Init+0x310>)
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	089b      	lsrs	r3, r3, #2
 8001112:	3302      	adds	r3, #2
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800111a:	4b3b      	ldr	r3, [pc, #236]	; (8001208 <HAL_GPIO_Init+0x334>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	43db      	mvns	r3, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4013      	ands	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800113e:	4a32      	ldr	r2, [pc, #200]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001144:	4b30      	ldr	r3, [pc, #192]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001168:	4a27      	ldr	r2, [pc, #156]	; (8001208 <HAL_GPIO_Init+0x334>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800116e:	4b26      	ldr	r3, [pc, #152]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d003      	beq.n	8001192 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001192:	4a1d      	ldr	r2, [pc, #116]	; (8001208 <HAL_GPIO_Init+0x334>)
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_GPIO_Init+0x334>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011bc:	4a12      	ldr	r2, [pc, #72]	; (8001208 <HAL_GPIO_Init+0x334>)
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	3301      	adds	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	f67f ae90 	bls.w	8000ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40020000 	.word	0x40020000
 80011ec:	40020400 	.word	0x40020400
 80011f0:	40020800 	.word	0x40020800
 80011f4:	40020c00 	.word	0x40020c00
 80011f8:	40021000 	.word	0x40021000
 80011fc:	40021400 	.word	0x40021400
 8001200:	40021800 	.word	0x40021800
 8001204:	40021c00 	.word	0x40021c00
 8001208:	40013c00 	.word	0x40013c00

0800120c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001228:	e003      	b.n	8001232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	041a      	lsls	r2, r3, #16
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	619a      	str	r2, [r3, #24]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800123e:	b480      	push	{r7}
 8001240:	b085      	sub	sp, #20
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
 8001246:	460b      	mov	r3, r1
 8001248:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001250:	887a      	ldrh	r2, [r7, #2]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4013      	ands	r3, r2
 8001256:	041a      	lsls	r2, r3, #16
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	43d9      	mvns	r1, r3
 800125c:	887b      	ldrh	r3, [r7, #2]
 800125e:	400b      	ands	r3, r1
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	619a      	str	r2, [r3, #24]
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e267      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d075      	beq.n	800137e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001292:	4b88      	ldr	r3, [pc, #544]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b04      	cmp	r3, #4
 800129c:	d00c      	beq.n	80012b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800129e:	4b85      	ldr	r3, [pc, #532]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d112      	bne.n	80012d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012aa:	4b82      	ldr	r3, [pc, #520]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012b6:	d10b      	bne.n	80012d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b8:	4b7e      	ldr	r3, [pc, #504]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d05b      	beq.n	800137c <HAL_RCC_OscConfig+0x108>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d157      	bne.n	800137c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e242      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d8:	d106      	bne.n	80012e8 <HAL_RCC_OscConfig+0x74>
 80012da:	4b76      	ldr	r3, [pc, #472]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a75      	ldr	r2, [pc, #468]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e01d      	b.n	8001324 <HAL_RCC_OscConfig+0xb0>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0x98>
 80012f2:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a6f      	ldr	r2, [pc, #444]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b6d      	ldr	r3, [pc, #436]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a6c      	ldr	r2, [pc, #432]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e00b      	b.n	8001324 <HAL_RCC_OscConfig+0xb0>
 800130c:	4b69      	ldr	r3, [pc, #420]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a68      	ldr	r2, [pc, #416]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b66      	ldr	r3, [pc, #408]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a65      	ldr	r2, [pc, #404]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 800131e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fcb4 	bl	8000c98 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fcb0 	bl	8000c98 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e207      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	4b5b      	ldr	r3, [pc, #364]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0xc0>
 8001352:	e014      	b.n	800137e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001354:	f7ff fca0 	bl	8000c98 <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff fc9c 	bl	8000c98 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e1f3      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	4b51      	ldr	r3, [pc, #324]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0xe8>
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d063      	beq.n	8001452 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800138a:	4b4a      	ldr	r3, [pc, #296]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00b      	beq.n	80013ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001396:	4b47      	ldr	r3, [pc, #284]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d11c      	bne.n	80013dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013a2:	4b44      	ldr	r3, [pc, #272]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d116      	bne.n	80013dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	4b41      	ldr	r3, [pc, #260]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_RCC_OscConfig+0x152>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e1c7      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b3b      	ldr	r3, [pc, #236]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4937      	ldr	r1, [pc, #220]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	e03a      	b.n	8001452 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d020      	beq.n	8001426 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e4:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <HAL_RCC_OscConfig+0x244>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ea:	f7ff fc55 	bl	8000c98 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff fc51 	bl	8000c98 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e1a8      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0f0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001410:	4b28      	ldr	r3, [pc, #160]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	691b      	ldr	r3, [r3, #16]
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4925      	ldr	r1, [pc, #148]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001420:	4313      	orrs	r3, r2
 8001422:	600b      	str	r3, [r1, #0]
 8001424:	e015      	b.n	8001452 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001426:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <HAL_RCC_OscConfig+0x244>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800142c:	f7ff fc34 	bl	8000c98 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001434:	f7ff fc30 	bl	8000c98 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e187      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	4b1b      	ldr	r3, [pc, #108]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d036      	beq.n	80014cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d016      	beq.n	8001494 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_RCC_OscConfig+0x248>)
 8001468:	2201      	movs	r2, #1
 800146a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800146c:	f7ff fc14 	bl	8000c98 <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001474:	f7ff fc10 	bl	8000c98 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b02      	cmp	r3, #2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e167      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <HAL_RCC_OscConfig+0x240>)
 8001488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0x200>
 8001492:	e01b      	b.n	80014cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <HAL_RCC_OscConfig+0x248>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149a:	f7ff fbfd 	bl	8000c98 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	e00e      	b.n	80014c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a2:	f7ff fbf9 	bl	8000c98 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d907      	bls.n	80014c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e150      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
 80014b4:	40023800 	.word	0x40023800
 80014b8:	42470000 	.word	0x42470000
 80014bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c0:	4b88      	ldr	r3, [pc, #544]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80014c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c4:	f003 0302 	and.w	r3, r3, #2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1ea      	bne.n	80014a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0304 	and.w	r3, r3, #4
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f000 8097 	beq.w	8001608 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014de:	4b81      	ldr	r3, [pc, #516]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10f      	bne.n	800150a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b7d      	ldr	r3, [pc, #500]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a7c      	ldr	r2, [pc, #496]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80014f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b7a      	ldr	r3, [pc, #488]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001506:	2301      	movs	r3, #1
 8001508:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150a:	4b77      	ldr	r3, [pc, #476]	; (80016e8 <HAL_RCC_OscConfig+0x474>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001512:	2b00      	cmp	r3, #0
 8001514:	d118      	bne.n	8001548 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001516:	4b74      	ldr	r3, [pc, #464]	; (80016e8 <HAL_RCC_OscConfig+0x474>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a73      	ldr	r2, [pc, #460]	; (80016e8 <HAL_RCC_OscConfig+0x474>)
 800151c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001522:	f7ff fbb9 	bl	8000c98 <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800152a:	f7ff fbb5 	bl	8000c98 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e10c      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153c:	4b6a      	ldr	r3, [pc, #424]	; (80016e8 <HAL_RCC_OscConfig+0x474>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f0      	beq.n	800152a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d106      	bne.n	800155e <HAL_RCC_OscConfig+0x2ea>
 8001550:	4b64      	ldr	r3, [pc, #400]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	4a63      	ldr	r2, [pc, #396]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6713      	str	r3, [r2, #112]	; 0x70
 800155c:	e01c      	b.n	8001598 <HAL_RCC_OscConfig+0x324>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b05      	cmp	r3, #5
 8001564:	d10c      	bne.n	8001580 <HAL_RCC_OscConfig+0x30c>
 8001566:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156a:	4a5e      	ldr	r2, [pc, #376]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6713      	str	r3, [r2, #112]	; 0x70
 8001572:	4b5c      	ldr	r3, [pc, #368]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001576:	4a5b      	ldr	r2, [pc, #364]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6713      	str	r3, [r2, #112]	; 0x70
 800157e:	e00b      	b.n	8001598 <HAL_RCC_OscConfig+0x324>
 8001580:	4b58      	ldr	r3, [pc, #352]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	4a57      	ldr	r2, [pc, #348]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	6713      	str	r3, [r2, #112]	; 0x70
 800158c:	4b55      	ldr	r3, [pc, #340]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 800158e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001590:	4a54      	ldr	r2, [pc, #336]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001592:	f023 0304 	bic.w	r3, r3, #4
 8001596:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d015      	beq.n	80015cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a0:	f7ff fb7a 	bl	8000c98 <HAL_GetTick>
 80015a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a6:	e00a      	b.n	80015be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a8:	f7ff fb76 	bl	8000c98 <HAL_GetTick>
 80015ac:	4602      	mov	r2, r0
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e0cb      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015be:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0ee      	beq.n	80015a8 <HAL_RCC_OscConfig+0x334>
 80015ca:	e014      	b.n	80015f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fb64 	bl	8000c98 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d2:	e00a      	b.n	80015ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d4:	f7ff fb60 	bl	8000c98 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e0b5      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ea:	4b3e      	ldr	r3, [pc, #248]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80015ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1ee      	bne.n	80015d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015f6:	7dfb      	ldrb	r3, [r7, #23]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d105      	bne.n	8001608 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015fc:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	4a38      	ldr	r2, [pc, #224]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001606:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80a1 	beq.w	8001754 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b08      	cmp	r3, #8
 800161c:	d05c      	beq.n	80016d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d141      	bne.n	80016aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001626:	4b31      	ldr	r3, [pc, #196]	; (80016ec <HAL_RCC_OscConfig+0x478>)
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162c:	f7ff fb34 	bl	8000c98 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001634:	f7ff fb30 	bl	8000c98 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e087      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1f0      	bne.n	8001634 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69da      	ldr	r2, [r3, #28]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001660:	019b      	lsls	r3, r3, #6
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001668:	085b      	lsrs	r3, r3, #1
 800166a:	3b01      	subs	r3, #1
 800166c:	041b      	lsls	r3, r3, #16
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001674:	061b      	lsls	r3, r3, #24
 8001676:	491b      	ldr	r1, [pc, #108]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_RCC_OscConfig+0x478>)
 800167e:	2201      	movs	r2, #1
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff fb09 	bl	8000c98 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168a:	f7ff fb05 	bl	8000c98 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e05c      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x416>
 80016a8:	e054      	b.n	8001754 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <HAL_RCC_OscConfig+0x478>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff faf2 	bl	8000c98 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b8:	f7ff faee 	bl	8000c98 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e045      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_RCC_OscConfig+0x470>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x444>
 80016d6:	e03d      	b.n	8001754 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d107      	bne.n	80016f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e038      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40007000 	.word	0x40007000
 80016ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_RCC_OscConfig+0x4ec>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d028      	beq.n	8001750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d121      	bne.n	8001750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	429a      	cmp	r2, r3
 8001718:	d11a      	bne.n	8001750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001720:	4013      	ands	r3, r2
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001726:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001728:	4293      	cmp	r3, r2
 800172a:	d111      	bne.n	8001750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001736:	085b      	lsrs	r3, r3, #1
 8001738:	3b01      	subs	r3, #1
 800173a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800173c:	429a      	cmp	r2, r3
 800173e:	d107      	bne.n	8001750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800174c:	429a      	cmp	r2, r3
 800174e:	d001      	beq.n	8001754 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023800 	.word	0x40023800

08001764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0cc      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b68      	ldr	r3, [pc, #416]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d90c      	bls.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b65      	ldr	r3, [pc, #404]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b63      	ldr	r3, [pc, #396]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0b8      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0302 	and.w	r3, r3, #2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d020      	beq.n	80017ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017b8:	4b59      	ldr	r3, [pc, #356]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	4a58      	ldr	r2, [pc, #352]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80017c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d0:	4b53      	ldr	r3, [pc, #332]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a52      	ldr	r2, [pc, #328]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017dc:	4b50      	ldr	r3, [pc, #320]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	494d      	ldr	r1, [pc, #308]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d044      	beq.n	8001884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001802:	4b47      	ldr	r3, [pc, #284]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d119      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e07f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d003      	beq.n	8001822 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800181e:	2b03      	cmp	r3, #3
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e06f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e067      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001842:	4b37      	ldr	r3, [pc, #220]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4934      	ldr	r1, [pc, #208]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001850:	4313      	orrs	r3, r2
 8001852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001854:	f7ff fa20 	bl	8000c98 <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	e00a      	b.n	8001872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7ff fa1c 	bl	8000c98 <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	; 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e04f      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 020c 	and.w	r2, r3, #12
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	429a      	cmp	r2, r3
 8001882:	d1eb      	bne.n	800185c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001884:	4b25      	ldr	r3, [pc, #148]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d20c      	bcs.n	80018ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	b2d2      	uxtb	r2, r2
 8001898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800189a:	4b20      	ldr	r3, [pc, #128]	; (800191c <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d001      	beq.n	80018ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e032      	b.n	8001912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d008      	beq.n	80018ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018b8:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4916      	ldr	r1, [pc, #88]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d009      	beq.n	80018ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	490e      	ldr	r1, [pc, #56]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ea:	f000 f821 	bl	8001930 <HAL_RCC_GetSysClockFreq>
 80018ee:	4602      	mov	r2, r0
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 030f 	and.w	r3, r3, #15
 80018fa:	490a      	ldr	r1, [pc, #40]	; (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	5ccb      	ldrb	r3, [r1, r3]
 80018fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001902:	4a09      	ldr	r2, [pc, #36]	; (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_RCC_ClockConfig+0x1c8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f980 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40023c00 	.word	0x40023c00
 8001920:	40023800 	.word	0x40023800
 8001924:	08003120 	.word	0x08003120
 8001928:	20000000 	.word	0x20000000
 800192c:	20000004 	.word	0x20000004

08001930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001934:	b094      	sub	sp, #80	; 0x50
 8001936:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	647b      	str	r3, [r7, #68]	; 0x44
 800193c:	2300      	movs	r3, #0
 800193e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001940:	2300      	movs	r3, #0
 8001942:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001948:	4b79      	ldr	r3, [pc, #484]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 030c 	and.w	r3, r3, #12
 8001950:	2b08      	cmp	r3, #8
 8001952:	d00d      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x40>
 8001954:	2b08      	cmp	r3, #8
 8001956:	f200 80e1 	bhi.w	8001b1c <HAL_RCC_GetSysClockFreq+0x1ec>
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_RCC_GetSysClockFreq+0x34>
 800195e:	2b04      	cmp	r3, #4
 8001960:	d003      	beq.n	800196a <HAL_RCC_GetSysClockFreq+0x3a>
 8001962:	e0db      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001964:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001966:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001968:	e0db      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800196a:	4b73      	ldr	r3, [pc, #460]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x208>)
 800196c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800196e:	e0d8      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001970:	4b6f      	ldr	r3, [pc, #444]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001978:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800197a:	4b6d      	ldr	r3, [pc, #436]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d063      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001986:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	099b      	lsrs	r3, r3, #6
 800198c:	2200      	movs	r2, #0
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001990:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
 800199e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80019a2:	4622      	mov	r2, r4
 80019a4:	462b      	mov	r3, r5
 80019a6:	f04f 0000 	mov.w	r0, #0
 80019aa:	f04f 0100 	mov.w	r1, #0
 80019ae:	0159      	lsls	r1, r3, #5
 80019b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019b4:	0150      	lsls	r0, r2, #5
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4621      	mov	r1, r4
 80019bc:	1a51      	subs	r1, r2, r1
 80019be:	6139      	str	r1, [r7, #16]
 80019c0:	4629      	mov	r1, r5
 80019c2:	eb63 0301 	sbc.w	r3, r3, r1
 80019c6:	617b      	str	r3, [r7, #20]
 80019c8:	f04f 0200 	mov.w	r2, #0
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019d4:	4659      	mov	r1, fp
 80019d6:	018b      	lsls	r3, r1, #6
 80019d8:	4651      	mov	r1, sl
 80019da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019de:	4651      	mov	r1, sl
 80019e0:	018a      	lsls	r2, r1, #6
 80019e2:	4651      	mov	r1, sl
 80019e4:	ebb2 0801 	subs.w	r8, r2, r1
 80019e8:	4659      	mov	r1, fp
 80019ea:	eb63 0901 	sbc.w	r9, r3, r1
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a02:	4690      	mov	r8, r2
 8001a04:	4699      	mov	r9, r3
 8001a06:	4623      	mov	r3, r4
 8001a08:	eb18 0303 	adds.w	r3, r8, r3
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	462b      	mov	r3, r5
 8001a10:	eb49 0303 	adc.w	r3, r9, r3
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a22:	4629      	mov	r1, r5
 8001a24:	024b      	lsls	r3, r1, #9
 8001a26:	4621      	mov	r1, r4
 8001a28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	024a      	lsls	r2, r1, #9
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a36:	2200      	movs	r2, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a40:	f7fe fbc2 	bl	80001c8 <__aeabi_uldivmod>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4613      	mov	r3, r2
 8001a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a4c:	e058      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4e:	4b38      	ldr	r3, [pc, #224]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	2200      	movs	r2, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	4611      	mov	r1, r2
 8001a5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a5e:	623b      	str	r3, [r7, #32]
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
 8001a64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a68:	4642      	mov	r2, r8
 8001a6a:	464b      	mov	r3, r9
 8001a6c:	f04f 0000 	mov.w	r0, #0
 8001a70:	f04f 0100 	mov.w	r1, #0
 8001a74:	0159      	lsls	r1, r3, #5
 8001a76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a7a:	0150      	lsls	r0, r2, #5
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4641      	mov	r1, r8
 8001a82:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a86:	4649      	mov	r1, r9
 8001a88:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001aa0:	ebb2 040a 	subs.w	r4, r2, sl
 8001aa4:	eb63 050b 	sbc.w	r5, r3, fp
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	00eb      	lsls	r3, r5, #3
 8001ab2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ab6:	00e2      	lsls	r2, r4, #3
 8001ab8:	4614      	mov	r4, r2
 8001aba:	461d      	mov	r5, r3
 8001abc:	4643      	mov	r3, r8
 8001abe:	18e3      	adds	r3, r4, r3
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	464b      	mov	r3, r9
 8001ac4:	eb45 0303 	adc.w	r3, r5, r3
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	028b      	lsls	r3, r1, #10
 8001ada:	4621      	mov	r1, r4
 8001adc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	028a      	lsls	r2, r1, #10
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aea:	2200      	movs	r2, #0
 8001aec:	61bb      	str	r3, [r7, #24]
 8001aee:	61fa      	str	r2, [r7, #28]
 8001af0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001af4:	f7fe fb68 	bl	80001c8 <__aeabi_uldivmod>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4613      	mov	r3, r2
 8001afe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b1a:	e002      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3750      	adds	r7, #80	; 0x50
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	00f42400 	.word	0x00f42400
 8001b38:	007a1200 	.word	0x007a1200

08001b3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e041      	b.n	8001bd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7fe ff0c 	bl	8000980 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3304      	adds	r3, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	f000 fdce 	bl	800271c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d001      	beq.n	8001bf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e04e      	b.n	8001c92 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a23      	ldr	r2, [pc, #140]	; (8001ca0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d022      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1e:	d01d      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d018      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ca8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d013      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <HAL_TIM_Base_Start_IT+0xd0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00e      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a1b      	ldr	r2, [pc, #108]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d009      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d004      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x80>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d111      	bne.n	8001c80 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d010      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f042 0201 	orr.w	r2, r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7e:	e007      	b.n	8001c90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	40000400 	.word	0x40000400
 8001ca8:	40000800 	.word	0x40000800
 8001cac:	40000c00 	.word	0x40000c00
 8001cb0:	40010400 	.word	0x40010400
 8001cb4:	40014000 	.word	0x40014000
 8001cb8:	40001800 	.word	0x40001800

08001cbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e041      	b.n	8001d52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d106      	bne.n	8001ce8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 f839 	bl	8001d5a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2202      	movs	r2, #2
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4610      	mov	r0, r2
 8001cfc:	f000 fd0e 	bl	800271c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e041      	b.n	8001e04 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d106      	bne.n	8001d9a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f839 	bl	8001e0c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3304      	adds	r3, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4610      	mov	r0, r2
 8001dae:	f000 fcb5 	bl	800271c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d104      	bne.n	8001e3e <HAL_TIM_IC_Start_IT+0x1e>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	e013      	b.n	8001e66 <HAL_TIM_IC_Start_IT+0x46>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d104      	bne.n	8001e4e <HAL_TIM_IC_Start_IT+0x2e>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	e00b      	b.n	8001e66 <HAL_TIM_IC_Start_IT+0x46>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d104      	bne.n	8001e5e <HAL_TIM_IC_Start_IT+0x3e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	e003      	b.n	8001e66 <HAL_TIM_IC_Start_IT+0x46>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d104      	bne.n	8001e78 <HAL_TIM_IC_Start_IT+0x58>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	e013      	b.n	8001ea0 <HAL_TIM_IC_Start_IT+0x80>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	2b04      	cmp	r3, #4
 8001e7c:	d104      	bne.n	8001e88 <HAL_TIM_IC_Start_IT+0x68>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e00b      	b.n	8001ea0 <HAL_TIM_IC_Start_IT+0x80>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d104      	bne.n	8001e98 <HAL_TIM_IC_Start_IT+0x78>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	e003      	b.n	8001ea0 <HAL_TIM_IC_Start_IT+0x80>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001ea2:	7bbb      	ldrb	r3, [r7, #14]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d102      	bne.n	8001eae <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ea8:	7b7b      	ldrb	r3, [r7, #13]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d001      	beq.n	8001eb2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e0cc      	b.n	800204c <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d104      	bne.n	8001ec2 <HAL_TIM_IC_Start_IT+0xa2>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec0:	e013      	b.n	8001eea <HAL_TIM_IC_Start_IT+0xca>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d104      	bne.n	8001ed2 <HAL_TIM_IC_Start_IT+0xb2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed0:	e00b      	b.n	8001eea <HAL_TIM_IC_Start_IT+0xca>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d104      	bne.n	8001ee2 <HAL_TIM_IC_Start_IT+0xc2>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ee0:	e003      	b.n	8001eea <HAL_TIM_IC_Start_IT+0xca>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d104      	bne.n	8001efa <HAL_TIM_IC_Start_IT+0xda>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ef8:	e013      	b.n	8001f22 <HAL_TIM_IC_Start_IT+0x102>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d104      	bne.n	8001f0a <HAL_TIM_IC_Start_IT+0xea>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2202      	movs	r2, #2
 8001f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f08:	e00b      	b.n	8001f22 <HAL_TIM_IC_Start_IT+0x102>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b08      	cmp	r3, #8
 8001f0e:	d104      	bne.n	8001f1a <HAL_TIM_IC_Start_IT+0xfa>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f18:	e003      	b.n	8001f22 <HAL_TIM_IC_Start_IT+0x102>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b0c      	cmp	r3, #12
 8001f26:	d841      	bhi.n	8001fac <HAL_TIM_IC_Start_IT+0x18c>
 8001f28:	a201      	add	r2, pc, #4	; (adr r2, 8001f30 <HAL_TIM_IC_Start_IT+0x110>)
 8001f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f2e:	bf00      	nop
 8001f30:	08001f65 	.word	0x08001f65
 8001f34:	08001fad 	.word	0x08001fad
 8001f38:	08001fad 	.word	0x08001fad
 8001f3c:	08001fad 	.word	0x08001fad
 8001f40:	08001f77 	.word	0x08001f77
 8001f44:	08001fad 	.word	0x08001fad
 8001f48:	08001fad 	.word	0x08001fad
 8001f4c:	08001fad 	.word	0x08001fad
 8001f50:	08001f89 	.word	0x08001f89
 8001f54:	08001fad 	.word	0x08001fad
 8001f58:	08001fad 	.word	0x08001fad
 8001f5c:	08001fad 	.word	0x08001fad
 8001f60:	08001f9b 	.word	0x08001f9b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f042 0202 	orr.w	r2, r2, #2
 8001f72:	60da      	str	r2, [r3, #12]
      break;
 8001f74:	e01d      	b.n	8001fb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f042 0204 	orr.w	r2, r2, #4
 8001f84:	60da      	str	r2, [r3, #12]
      break;
 8001f86:	e014      	b.n	8001fb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0208 	orr.w	r2, r2, #8
 8001f96:	60da      	str	r2, [r3, #12]
      break;
 8001f98:	e00b      	b.n	8001fb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68da      	ldr	r2, [r3, #12]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0210 	orr.w	r2, r2, #16
 8001fa8:	60da      	str	r2, [r3, #12]
      break;
 8001faa:	e002      	b.n	8001fb2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb0:	bf00      	nop
  }

  if (status == HAL_OK)
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d148      	bne.n	800204a <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	6839      	ldr	r1, [r7, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f000 ffbf 	bl	8002f44 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a22      	ldr	r2, [pc, #136]	; (8002054 <HAL_TIM_IC_Start_IT+0x234>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d022      	beq.n	8002016 <HAL_TIM_IC_Start_IT+0x1f6>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd8:	d01d      	beq.n	8002016 <HAL_TIM_IC_Start_IT+0x1f6>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a1e      	ldr	r2, [pc, #120]	; (8002058 <HAL_TIM_IC_Start_IT+0x238>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d018      	beq.n	8002016 <HAL_TIM_IC_Start_IT+0x1f6>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a1c      	ldr	r2, [pc, #112]	; (800205c <HAL_TIM_IC_Start_IT+0x23c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d013      	beq.n	8002016 <HAL_TIM_IC_Start_IT+0x1f6>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a1b      	ldr	r2, [pc, #108]	; (8002060 <HAL_TIM_IC_Start_IT+0x240>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d00e      	beq.n	8002016 <HAL_TIM_IC_Start_IT+0x1f6>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a19      	ldr	r2, [pc, #100]	; (8002064 <HAL_TIM_IC_Start_IT+0x244>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d009      	beq.n	8002016 <HAL_TIM_IC_Start_IT+0x1f6>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a18      	ldr	r2, [pc, #96]	; (8002068 <HAL_TIM_IC_Start_IT+0x248>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d004      	beq.n	8002016 <HAL_TIM_IC_Start_IT+0x1f6>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a16      	ldr	r2, [pc, #88]	; (800206c <HAL_TIM_IC_Start_IT+0x24c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d111      	bne.n	800203a <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b06      	cmp	r3, #6
 8002026:	d010      	beq.n	800204a <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002038:	e007      	b.n	800204a <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f042 0201 	orr.w	r2, r2, #1
 8002048:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40010000 	.word	0x40010000
 8002058:	40000400 	.word	0x40000400
 800205c:	40000800 	.word	0x40000800
 8002060:	40000c00 	.word	0x40000c00
 8002064:	40010400 	.word	0x40010400
 8002068:	40014000 	.word	0x40014000
 800206c:	40001800 	.word	0x40001800

08002070 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b02      	cmp	r3, #2
 8002084:	d122      	bne.n	80020cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b02      	cmp	r3, #2
 8002092:	d11b      	bne.n	80020cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0202 	mvn.w	r2, #2
 800209c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe fa1e 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 80020b8:	e005      	b.n	80020c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fb0f 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 fb16 	bl	80026f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d122      	bne.n	8002120 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d11b      	bne.n	8002120 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0204 	mvn.w	r2, #4
 80020f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7fe f9f4 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 fae5 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 faec 	bl	80026f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b08      	cmp	r3, #8
 800212c:	d122      	bne.n	8002174 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b08      	cmp	r3, #8
 800213a:	d11b      	bne.n	8002174 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0208 	mvn.w	r2, #8
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2204      	movs	r2, #4
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7fe f9ca 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 fabb 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 fac2 	bl	80026f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b10      	cmp	r3, #16
 8002180:	d122      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b10      	cmp	r3, #16
 800218e:	d11b      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0210 	mvn.w	r2, #16
 8002198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2208      	movs	r2, #8
 800219e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe f9a0 	bl	80004f4 <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fa91 	bl	80026de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 fa98 	bl	80026f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d10e      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d107      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0201 	mvn.w	r2, #1
 80021ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 fa6b 	bl	80026ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fe:	2b80      	cmp	r3, #128	; 0x80
 8002200:	d10e      	bne.n	8002220 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220c:	2b80      	cmp	r3, #128	; 0x80
 800220e:	d107      	bne.n	8002220 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 ff3e 	bl	800309c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222a:	2b40      	cmp	r3, #64	; 0x40
 800222c:	d10e      	bne.n	800224c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002238:	2b40      	cmp	r3, #64	; 0x40
 800223a:	d107      	bne.n	800224c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fa5d 	bl	8002706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b20      	cmp	r3, #32
 8002258:	d10e      	bne.n	8002278 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b20      	cmp	r3, #32
 8002266:	d107      	bne.n	8002278 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0220 	mvn.w	r2, #32
 8002270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 ff08 	bl	8003088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_TIM_IC_ConfigChannel+0x1e>
 800229a:	2302      	movs	r3, #2
 800229c:	e088      	b.n	80023b0 <HAL_TIM_IC_ConfigChannel+0x130>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d11b      	bne.n	80022e4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	6819      	ldr	r1, [r3, #0]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f000 fc7e 	bl	8002bbc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699a      	ldr	r2, [r3, #24]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 020c 	bic.w	r2, r2, #12
 80022ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6999      	ldr	r1, [r3, #24]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	619a      	str	r2, [r3, #24]
 80022e2:	e060      	b.n	80023a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b04      	cmp	r3, #4
 80022e8:	d11c      	bne.n	8002324 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	6819      	ldr	r1, [r3, #0]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	f000 fd02 	bl	8002d02 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699a      	ldr	r2, [r3, #24]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800230c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6999      	ldr	r1, [r3, #24]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	021a      	lsls	r2, r3, #8
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	619a      	str	r2, [r3, #24]
 8002322:	e040      	b.n	80023a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b08      	cmp	r3, #8
 8002328:	d11b      	bne.n	8002362 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	6819      	ldr	r1, [r3, #0]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	f000 fd4f 	bl	8002ddc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 020c 	bic.w	r2, r2, #12
 800234c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	69d9      	ldr	r1, [r3, #28]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	61da      	str	r2, [r3, #28]
 8002360:	e021      	b.n	80023a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b0c      	cmp	r3, #12
 8002366:	d11c      	bne.n	80023a2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	6819      	ldr	r1, [r3, #0]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f000 fd6c 	bl	8002e54 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69da      	ldr	r2, [r3, #28]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800238a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	69d9      	ldr	r1, [r3, #28]
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	021a      	lsls	r2, r3, #8
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	61da      	str	r2, [r3, #28]
 80023a0:	e001      	b.n	80023a6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	60f8      	str	r0, [r7, #12]
 80023c0:	60b9      	str	r1, [r7, #8]
 80023c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e0ae      	b.n	8002534 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b0c      	cmp	r3, #12
 80023e2:	f200 809f 	bhi.w	8002524 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80023e6:	a201      	add	r2, pc, #4	; (adr r2, 80023ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ec:	08002421 	.word	0x08002421
 80023f0:	08002525 	.word	0x08002525
 80023f4:	08002525 	.word	0x08002525
 80023f8:	08002525 	.word	0x08002525
 80023fc:	08002461 	.word	0x08002461
 8002400:	08002525 	.word	0x08002525
 8002404:	08002525 	.word	0x08002525
 8002408:	08002525 	.word	0x08002525
 800240c:	080024a3 	.word	0x080024a3
 8002410:	08002525 	.word	0x08002525
 8002414:	08002525 	.word	0x08002525
 8002418:	08002525 	.word	0x08002525
 800241c:	080024e3 	.word	0x080024e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68b9      	ldr	r1, [r7, #8]
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fa18 	bl	800285c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699a      	ldr	r2, [r3, #24]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0208 	orr.w	r2, r2, #8
 800243a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0204 	bic.w	r2, r2, #4
 800244a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6999      	ldr	r1, [r3, #24]
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	619a      	str	r2, [r3, #24]
      break;
 800245e:	e064      	b.n	800252a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68b9      	ldr	r1, [r7, #8]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fa68 	bl	800293c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800247a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800248a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6999      	ldr	r1, [r3, #24]
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	021a      	lsls	r2, r3, #8
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	619a      	str	r2, [r3, #24]
      break;
 80024a0:	e043      	b.n	800252a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68b9      	ldr	r1, [r7, #8]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fabd 	bl	8002a28 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	69da      	ldr	r2, [r3, #28]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f042 0208 	orr.w	r2, r2, #8
 80024bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	69da      	ldr	r2, [r3, #28]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0204 	bic.w	r2, r2, #4
 80024cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	69d9      	ldr	r1, [r3, #28]
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	61da      	str	r2, [r3, #28]
      break;
 80024e0:	e023      	b.n	800252a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68b9      	ldr	r1, [r7, #8]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fb11 	bl	8002b10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	69da      	ldr	r2, [r3, #28]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69d9      	ldr	r1, [r3, #28]
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	021a      	lsls	r2, r3, #8
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	61da      	str	r2, [r3, #28]
      break;
 8002522:	e002      	b.n	800252a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	75fb      	strb	r3, [r7, #23]
      break;
 8002528:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002532:	7dfb      	ldrb	r3, [r7, #23]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002546:	2300      	movs	r3, #0
 8002548:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_TIM_ConfigClockSource+0x1c>
 8002554:	2302      	movs	r3, #2
 8002556:	e0b4      	b.n	80026c2 <HAL_TIM_ConfigClockSource+0x186>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2202      	movs	r2, #2
 8002564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800257e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002590:	d03e      	beq.n	8002610 <HAL_TIM_ConfigClockSource+0xd4>
 8002592:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002596:	f200 8087 	bhi.w	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 800259a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800259e:	f000 8086 	beq.w	80026ae <HAL_TIM_ConfigClockSource+0x172>
 80025a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a6:	d87f      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025a8:	2b70      	cmp	r3, #112	; 0x70
 80025aa:	d01a      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0xa6>
 80025ac:	2b70      	cmp	r3, #112	; 0x70
 80025ae:	d87b      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025b0:	2b60      	cmp	r3, #96	; 0x60
 80025b2:	d050      	beq.n	8002656 <HAL_TIM_ConfigClockSource+0x11a>
 80025b4:	2b60      	cmp	r3, #96	; 0x60
 80025b6:	d877      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025b8:	2b50      	cmp	r3, #80	; 0x50
 80025ba:	d03c      	beq.n	8002636 <HAL_TIM_ConfigClockSource+0xfa>
 80025bc:	2b50      	cmp	r3, #80	; 0x50
 80025be:	d873      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025c0:	2b40      	cmp	r3, #64	; 0x40
 80025c2:	d058      	beq.n	8002676 <HAL_TIM_ConfigClockSource+0x13a>
 80025c4:	2b40      	cmp	r3, #64	; 0x40
 80025c6:	d86f      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025c8:	2b30      	cmp	r3, #48	; 0x30
 80025ca:	d064      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x15a>
 80025cc:	2b30      	cmp	r3, #48	; 0x30
 80025ce:	d86b      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d060      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x15a>
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d867      	bhi.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d05c      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x15a>
 80025dc:	2b10      	cmp	r3, #16
 80025de:	d05a      	beq.n	8002696 <HAL_TIM_ConfigClockSource+0x15a>
 80025e0:	e062      	b.n	80026a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6818      	ldr	r0, [r3, #0]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	6899      	ldr	r1, [r3, #8]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f000 fc87 	bl	8002f04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002604:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	609a      	str	r2, [r3, #8]
      break;
 800260e:	e04f      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6818      	ldr	r0, [r3, #0]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	6899      	ldr	r1, [r3, #8]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f000 fc70 	bl	8002f04 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002632:	609a      	str	r2, [r3, #8]
      break;
 8002634:	e03c      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6818      	ldr	r0, [r3, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	6859      	ldr	r1, [r3, #4]
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	461a      	mov	r2, r3
 8002644:	f000 fb2e 	bl	8002ca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2150      	movs	r1, #80	; 0x50
 800264e:	4618      	mov	r0, r3
 8002650:	f000 fc3d 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 8002654:	e02c      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6818      	ldr	r0, [r3, #0]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	6859      	ldr	r1, [r3, #4]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	461a      	mov	r2, r3
 8002664:	f000 fb8a 	bl	8002d7c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2160      	movs	r1, #96	; 0x60
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fc2d 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 8002674:	e01c      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6818      	ldr	r0, [r3, #0]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	461a      	mov	r2, r3
 8002684:	f000 fb0e 	bl	8002ca4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2140      	movs	r1, #64	; 0x40
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fc1d 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 8002694:	e00c      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	4610      	mov	r0, r2
 80026a2:	f000 fc14 	bl	8002ece <TIM_ITRx_SetConfig>
      break;
 80026a6:	e003      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
      break;
 80026ac:	e000      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80026ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a40      	ldr	r2, [pc, #256]	; (8002830 <TIM_Base_SetConfig+0x114>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d013      	beq.n	800275c <TIM_Base_SetConfig+0x40>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273a:	d00f      	beq.n	800275c <TIM_Base_SetConfig+0x40>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a3d      	ldr	r2, [pc, #244]	; (8002834 <TIM_Base_SetConfig+0x118>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00b      	beq.n	800275c <TIM_Base_SetConfig+0x40>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a3c      	ldr	r2, [pc, #240]	; (8002838 <TIM_Base_SetConfig+0x11c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d007      	beq.n	800275c <TIM_Base_SetConfig+0x40>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a3b      	ldr	r2, [pc, #236]	; (800283c <TIM_Base_SetConfig+0x120>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d003      	beq.n	800275c <TIM_Base_SetConfig+0x40>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a3a      	ldr	r2, [pc, #232]	; (8002840 <TIM_Base_SetConfig+0x124>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d108      	bne.n	800276e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a2f      	ldr	r2, [pc, #188]	; (8002830 <TIM_Base_SetConfig+0x114>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d02b      	beq.n	80027ce <TIM_Base_SetConfig+0xb2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800277c:	d027      	beq.n	80027ce <TIM_Base_SetConfig+0xb2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a2c      	ldr	r2, [pc, #176]	; (8002834 <TIM_Base_SetConfig+0x118>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d023      	beq.n	80027ce <TIM_Base_SetConfig+0xb2>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a2b      	ldr	r2, [pc, #172]	; (8002838 <TIM_Base_SetConfig+0x11c>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d01f      	beq.n	80027ce <TIM_Base_SetConfig+0xb2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a2a      	ldr	r2, [pc, #168]	; (800283c <TIM_Base_SetConfig+0x120>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d01b      	beq.n	80027ce <TIM_Base_SetConfig+0xb2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a29      	ldr	r2, [pc, #164]	; (8002840 <TIM_Base_SetConfig+0x124>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d017      	beq.n	80027ce <TIM_Base_SetConfig+0xb2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a28      	ldr	r2, [pc, #160]	; (8002844 <TIM_Base_SetConfig+0x128>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d013      	beq.n	80027ce <TIM_Base_SetConfig+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a27      	ldr	r2, [pc, #156]	; (8002848 <TIM_Base_SetConfig+0x12c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d00f      	beq.n	80027ce <TIM_Base_SetConfig+0xb2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a26      	ldr	r2, [pc, #152]	; (800284c <TIM_Base_SetConfig+0x130>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00b      	beq.n	80027ce <TIM_Base_SetConfig+0xb2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a25      	ldr	r2, [pc, #148]	; (8002850 <TIM_Base_SetConfig+0x134>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <TIM_Base_SetConfig+0xb2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a24      	ldr	r2, [pc, #144]	; (8002854 <TIM_Base_SetConfig+0x138>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d003      	beq.n	80027ce <TIM_Base_SetConfig+0xb2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a23      	ldr	r2, [pc, #140]	; (8002858 <TIM_Base_SetConfig+0x13c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d108      	bne.n	80027e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <TIM_Base_SetConfig+0x114>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d003      	beq.n	8002814 <TIM_Base_SetConfig+0xf8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a0c      	ldr	r2, [pc, #48]	; (8002840 <TIM_Base_SetConfig+0x124>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d103      	bne.n	800281c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	615a      	str	r2, [r3, #20]
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40010000 	.word	0x40010000
 8002834:	40000400 	.word	0x40000400
 8002838:	40000800 	.word	0x40000800
 800283c:	40000c00 	.word	0x40000c00
 8002840:	40010400 	.word	0x40010400
 8002844:	40014000 	.word	0x40014000
 8002848:	40014400 	.word	0x40014400
 800284c:	40014800 	.word	0x40014800
 8002850:	40001800 	.word	0x40001800
 8002854:	40001c00 	.word	0x40001c00
 8002858:	40002000 	.word	0x40002000

0800285c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f023 0201 	bic.w	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0303 	bic.w	r3, r3, #3
 8002892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f023 0302 	bic.w	r3, r3, #2
 80028a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a20      	ldr	r2, [pc, #128]	; (8002934 <TIM_OC1_SetConfig+0xd8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d003      	beq.n	80028c0 <TIM_OC1_SetConfig+0x64>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a1f      	ldr	r2, [pc, #124]	; (8002938 <TIM_OC1_SetConfig+0xdc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d10c      	bne.n	80028da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f023 0308 	bic.w	r3, r3, #8
 80028c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f023 0304 	bic.w	r3, r3, #4
 80028d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a15      	ldr	r2, [pc, #84]	; (8002934 <TIM_OC1_SetConfig+0xd8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d003      	beq.n	80028ea <TIM_OC1_SetConfig+0x8e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a14      	ldr	r2, [pc, #80]	; (8002938 <TIM_OC1_SetConfig+0xdc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d111      	bne.n	800290e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80028f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	621a      	str	r2, [r3, #32]
}
 8002928:	bf00      	nop
 800292a:	371c      	adds	r7, #28
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	40010000 	.word	0x40010000
 8002938:	40010400 	.word	0x40010400

0800293c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	f023 0210 	bic.w	r2, r3, #16
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800296a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f023 0320 	bic.w	r3, r3, #32
 8002986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	4313      	orrs	r3, r2
 8002992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a22      	ldr	r2, [pc, #136]	; (8002a20 <TIM_OC2_SetConfig+0xe4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d003      	beq.n	80029a4 <TIM_OC2_SetConfig+0x68>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a21      	ldr	r2, [pc, #132]	; (8002a24 <TIM_OC2_SetConfig+0xe8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d10d      	bne.n	80029c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	011b      	lsls	r3, r3, #4
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a17      	ldr	r2, [pc, #92]	; (8002a20 <TIM_OC2_SetConfig+0xe4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d003      	beq.n	80029d0 <TIM_OC2_SetConfig+0x94>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a16      	ldr	r2, [pc, #88]	; (8002a24 <TIM_OC2_SetConfig+0xe8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d113      	bne.n	80029f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	621a      	str	r2, [r3, #32]
}
 8002a12:	bf00      	nop
 8002a14:	371c      	adds	r7, #28
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40010000 	.word	0x40010000
 8002a24:	40010400 	.word	0x40010400

08002a28 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f023 0303 	bic.w	r3, r3, #3
 8002a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <TIM_OC3_SetConfig+0xe0>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d003      	beq.n	8002a8e <TIM_OC3_SetConfig+0x66>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a20      	ldr	r2, [pc, #128]	; (8002b0c <TIM_OC3_SetConfig+0xe4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10d      	bne.n	8002aaa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <TIM_OC3_SetConfig+0xe0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d003      	beq.n	8002aba <TIM_OC3_SetConfig+0x92>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a15      	ldr	r2, [pc, #84]	; (8002b0c <TIM_OC3_SetConfig+0xe4>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d113      	bne.n	8002ae2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ac0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ac8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	621a      	str	r2, [r3, #32]
}
 8002afc:	bf00      	nop
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	40010000 	.word	0x40010000
 8002b0c:	40010400 	.word	0x40010400

08002b10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	031b      	lsls	r3, r3, #12
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <TIM_OC4_SetConfig+0xa4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d003      	beq.n	8002b78 <TIM_OC4_SetConfig+0x68>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a11      	ldr	r2, [pc, #68]	; (8002bb8 <TIM_OC4_SetConfig+0xa8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d109      	bne.n	8002b8c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	019b      	lsls	r3, r3, #6
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	621a      	str	r2, [r3, #32]
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	40010400 	.word	0x40010400

08002bbc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f023 0201 	bic.w	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4a28      	ldr	r2, [pc, #160]	; (8002c88 <TIM_TI1_SetConfig+0xcc>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d01b      	beq.n	8002c22 <TIM_TI1_SetConfig+0x66>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf0:	d017      	beq.n	8002c22 <TIM_TI1_SetConfig+0x66>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4a25      	ldr	r2, [pc, #148]	; (8002c8c <TIM_TI1_SetConfig+0xd0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d013      	beq.n	8002c22 <TIM_TI1_SetConfig+0x66>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a24      	ldr	r2, [pc, #144]	; (8002c90 <TIM_TI1_SetConfig+0xd4>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00f      	beq.n	8002c22 <TIM_TI1_SetConfig+0x66>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4a23      	ldr	r2, [pc, #140]	; (8002c94 <TIM_TI1_SetConfig+0xd8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d00b      	beq.n	8002c22 <TIM_TI1_SetConfig+0x66>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4a22      	ldr	r2, [pc, #136]	; (8002c98 <TIM_TI1_SetConfig+0xdc>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d007      	beq.n	8002c22 <TIM_TI1_SetConfig+0x66>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4a21      	ldr	r2, [pc, #132]	; (8002c9c <TIM_TI1_SetConfig+0xe0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d003      	beq.n	8002c22 <TIM_TI1_SetConfig+0x66>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4a20      	ldr	r2, [pc, #128]	; (8002ca0 <TIM_TI1_SetConfig+0xe4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d101      	bne.n	8002c26 <TIM_TI1_SetConfig+0x6a>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <TIM_TI1_SetConfig+0x6c>
 8002c26:	2300      	movs	r3, #0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f023 0303 	bic.w	r3, r3, #3
 8002c32:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	e003      	b.n	8002c46 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	011b      	lsls	r3, r3, #4
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f023 030a 	bic.w	r3, r3, #10
 8002c60:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f003 030a 	and.w	r3, r3, #10
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	621a      	str	r2, [r3, #32]
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	40000400 	.word	0x40000400
 8002c90:	40000800 	.word	0x40000800
 8002c94:	40000c00 	.word	0x40000c00
 8002c98:	40010400 	.word	0x40010400
 8002c9c:	40014000 	.word	0x40014000
 8002ca0:	40001800 	.word	0x40001800

08002ca4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	f023 0201 	bic.w	r2, r3, #1
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f023 030a 	bic.w	r3, r3, #10
 8002ce0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	621a      	str	r2, [r3, #32]
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b087      	sub	sp, #28
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	f023 0210 	bic.w	r2, r3, #16
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	031b      	lsls	r3, r3, #12
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	621a      	str	r2, [r3, #32]
}
 8002d70:	bf00      	nop
 8002d72:	371c      	adds	r7, #28
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b087      	sub	sp, #28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	f023 0210 	bic.w	r2, r3, #16
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002da6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	031b      	lsls	r3, r3, #12
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002db8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	621a      	str	r2, [r3, #32]
}
 8002dd0:	bf00      	nop
 8002dd2:	371c      	adds	r7, #28
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b087      	sub	sp, #28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f023 0303 	bic.w	r3, r3, #3
 8002e08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002e2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	621a      	str	r2, [r3, #32]
}
 8002e48:	bf00      	nop
 8002e4a:	371c      	adds	r7, #28
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
 8002e60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	031b      	lsls	r3, r3, #12
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002ea6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	031b      	lsls	r3, r3, #12
 8002eac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	621a      	str	r2, [r3, #32]
}
 8002ec2:	bf00      	nop
 8002ec4:	371c      	adds	r7, #28
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b085      	sub	sp, #20
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ee6:	683a      	ldr	r2, [r7, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f043 0307 	orr.w	r3, r3, #7
 8002ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	609a      	str	r2, [r3, #8]
}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b087      	sub	sp, #28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	021a      	lsls	r2, r3, #8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	697a      	ldr	r2, [r7, #20]
 8002f36:	609a      	str	r2, [r3, #8]
}
 8002f38:	bf00      	nop
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b087      	sub	sp, #28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 031f 	and.w	r3, r3, #31
 8002f56:	2201      	movs	r2, #1
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a1a      	ldr	r2, [r3, #32]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	401a      	ands	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a1a      	ldr	r2, [r3, #32]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	431a      	orrs	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	621a      	str	r2, [r3, #32]
}
 8002f82:	bf00      	nop
 8002f84:	371c      	adds	r7, #28
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
	...

08002f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e05a      	b.n	800305e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a21      	ldr	r2, [pc, #132]	; (800306c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d022      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ff4:	d01d      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1d      	ldr	r2, [pc, #116]	; (8003070 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d018      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1b      	ldr	r2, [pc, #108]	; (8003074 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1a      	ldr	r2, [pc, #104]	; (8003078 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00e      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a18      	ldr	r2, [pc, #96]	; (800307c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d009      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a17      	ldr	r2, [pc, #92]	; (8003080 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d004      	beq.n	8003032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a15      	ldr	r2, [pc, #84]	; (8003084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d10c      	bne.n	800304c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	4313      	orrs	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40010000 	.word	0x40010000
 8003070:	40000400 	.word	0x40000400
 8003074:	40000800 	.word	0x40000800
 8003078:	40000c00 	.word	0x40000c00
 800307c:	40010400 	.word	0x40010400
 8003080:	40014000 	.word	0x40014000
 8003084:	40001800 	.word	0x40001800

08003088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <memset>:
 80030b0:	4402      	add	r2, r0
 80030b2:	4603      	mov	r3, r0
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d100      	bne.n	80030ba <memset+0xa>
 80030b8:	4770      	bx	lr
 80030ba:	f803 1b01 	strb.w	r1, [r3], #1
 80030be:	e7f9      	b.n	80030b4 <memset+0x4>

080030c0 <__libc_init_array>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	4d0d      	ldr	r5, [pc, #52]	; (80030f8 <__libc_init_array+0x38>)
 80030c4:	4c0d      	ldr	r4, [pc, #52]	; (80030fc <__libc_init_array+0x3c>)
 80030c6:	1b64      	subs	r4, r4, r5
 80030c8:	10a4      	asrs	r4, r4, #2
 80030ca:	2600      	movs	r6, #0
 80030cc:	42a6      	cmp	r6, r4
 80030ce:	d109      	bne.n	80030e4 <__libc_init_array+0x24>
 80030d0:	4d0b      	ldr	r5, [pc, #44]	; (8003100 <__libc_init_array+0x40>)
 80030d2:	4c0c      	ldr	r4, [pc, #48]	; (8003104 <__libc_init_array+0x44>)
 80030d4:	f000 f818 	bl	8003108 <_init>
 80030d8:	1b64      	subs	r4, r4, r5
 80030da:	10a4      	asrs	r4, r4, #2
 80030dc:	2600      	movs	r6, #0
 80030de:	42a6      	cmp	r6, r4
 80030e0:	d105      	bne.n	80030ee <__libc_init_array+0x2e>
 80030e2:	bd70      	pop	{r4, r5, r6, pc}
 80030e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e8:	4798      	blx	r3
 80030ea:	3601      	adds	r6, #1
 80030ec:	e7ee      	b.n	80030cc <__libc_init_array+0xc>
 80030ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80030f2:	4798      	blx	r3
 80030f4:	3601      	adds	r6, #1
 80030f6:	e7f2      	b.n	80030de <__libc_init_array+0x1e>
 80030f8:	08003138 	.word	0x08003138
 80030fc:	08003138 	.word	0x08003138
 8003100:	08003138 	.word	0x08003138
 8003104:	0800313c 	.word	0x0800313c

08003108 <_init>:
 8003108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310a:	bf00      	nop
 800310c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800310e:	bc08      	pop	{r3}
 8003110:	469e      	mov	lr, r3
 8003112:	4770      	bx	lr

08003114 <_fini>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	bf00      	nop
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr
